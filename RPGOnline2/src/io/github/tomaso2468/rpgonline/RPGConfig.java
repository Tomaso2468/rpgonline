/*
BSD 3-Clause License

Copyright (c) 2019, Tomas
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package io.github.tomaso2468.rpgonline;

import javax.annotation.Nonnegative;
import javax.annotation.Nonnull;

import io.github.tomaso2468.rpgonline.input.KeyboardInputProvider;
import io.github.tomaso2468.rpgonline.input.MapKeyProvider;
import io.github.tomaso2468.rpgonline.lang.LangProvider;

/**
 * A class for storing configuration details about the game engine.
 * 
 * @author Tomaso2468
 */
public final class RPGConfig {
	/**
	 * Prevent instantiation
	 */
	private RPGConfig() {

	}

	/**
	 * The size used by sprite maps generated by TextureMap. This requires texture
	 * mapping to be enabled. <b>This must be set before textures are
	 * initialised.</b> This setting will not surpass the maximum texture size of
	 * the graphics card.
	 * 
	 * @see io.github.tomaso2468.rpgonline.TextureMap
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#generateAllMaps()
	 * @see io.github.tomaso2468.rpgonline.TextureMap#genTextureMap(int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #mapped
	 */
	private static int autoSpriteMapSize = 512;
	/**
	 * Determines if the wind effect will be used by the rendering engine. If set to
	 * {@code false} any information provided by the game engine about wind will be
	 * set to 0.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.texture.WindTexture
	 * @see io.github.tomaso2468.rpgonline.world2d.texture.entity.WindEntityTexture
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 * @see io.github.tomaso2468.rpgonline.net.Client
	 */
	private static boolean wind = false;
	/**
	 * The size used by tiles as the grid size.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.Tile
	 * @see io.github.tomaso2468.rpgonline.world2d.texture.TileTexture
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 */
	private static int tileSize = 16;
	/**
	 * A handler for storing bindings on keyboards. This defaults to a
	 * {@code MapKeyProvider}
	 * 
	 * @see io.github.tomaso2468.rpgonline.input.MapKeyProvider
	 * @see io.github.tomaso2468.rpgonline.input.InputUtils
	 */
	private static KeyboardInputProvider keyInput = new MapKeyProvider();

	/**
	 * Determines if textures should be mapped/atlases. <b>This must be set before
	 * textures are initialised.</b>
	 * 
	 * @see io.github.tomaso2468.rpgonline.TextureMap
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#generateAllMaps()
	 * @see io.github.tomaso2468.rpgonline.TextureMap#genTextureMap(int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #autoSpriteMapSize
	 */
	private static boolean mapped = false;

	/**
	 * Determines if debug rendering is used.
	 * 
	 * @see io.github.tomaso2468.rpgonline.debug.Debugger
	 */
	private static boolean debug = false;

	/**
	 * Determines if lighting should be used.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.LightSource
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 */
	private static boolean lighting = false;

	/**
	 * Determines if particles should be used.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 * @see io.github.tomaso2468.rpgonline.bullet.BulletState
	 * @see io.github.tomaso2468.rpgonline.particle.Particle
	 */
	private static boolean particles = false;

	/**
	 * Determines if hitboxes should be rendered.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 */
	private static boolean hitbox = false;

	/**
	 * Determines the default filter mode for textures. <b>This must be set before
	 * textures are initialised.</b>
	 * 
	 * @see org.newdawn.slick.Image#setFilter(int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap
	 */
	private static int filterMode = Image.FILTER_NEAREST;
	
	/**
	 * The number of threads to use for pathfinding.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.pathfinding.PathFindingManager
	 */
	private static int pathfindingThreads = Math.min(Math.max(2, Runtime.getRuntime().availableProcessors() - 3), 6);
	
	/**
	 * The time to wait before entering sleep in a pathfinding thread.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.pathfinding.PathFindingManager
	 */
	private static long pathfindingSleepDelay = 500;
	/**
	 * The time to sleep for in a pathfinding thread.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.pathfinding.PathFindingManager
	 */
	private static long pathfindingSleepTime = 1000 / 30;
	
	/**
	 * Determines if HDR is enabled.
	 */
	private static boolean hdr = false;

	/**
	 * Determines how language settings are computed. This defaults to returning the
	 * current language. <b>This must be set before languages are initialised.</b>
	 * 
	 * @see io.github.tomaso2468.rpgonline.lang.Lang
	 */
	private static LangProvider lang = new LangProvider() {
		@Override
		public void setLang(String lang) {

		}

		@Override
		public String getLang(String def) {
			return def;
		}
	};

	/**
	 * Determines the location of language files for the game. <b>This must be set
	 * before languages are initialised.</b>
	 * 
	 * @see io.github.tomaso2468.rpgonline.lang.Lang
	 * @see io.github.tomaso2468.rpgonline.lang.LangPack
	 */
	private static String[] langloc = new String[0];

	/**
	 * Gets the size used by sprite maps generated by TextureMap. This requires
	 * texture mapping to be enabled. This setting will not surpass the maximum
	 * texture size of the graphics card but may display as a higher value. <b>This
	 * must be set before textures are initialised.</b>
	 * 
	 * @return An int that is greater than 0.
	 * 
	 * @see io.github.tomaso2468.rpgonline.TextureMap
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#generateAllMaps()
	 * @see io.github.tomaso2468.rpgonline.TextureMap#genTextureMap(int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #isMapped()
	 * @see #setMapped(boolean)
	 * @see #setAutoSpriteMapSize(int)
	 */
	public static int getAutoSpriteMapSize() {
		return autoSpriteMapSize;
	}

	/**
	 * Sets the size used by sprite maps generated by TextureMap. This requires
	 * texture mapping to be enabled. This setting will not surpass the maximum
	 * texture size of the graphics card but may display as a higher value. If a
	 * value greater than the maximum texture size is set it will change the setting
	 * but still be limited. <b>This must be set before textures are
	 * initialised.</b>
	 * 
	 * @return An int that is greater than 0.
	 * 
	 * @see io.github.tomaso2468.rpgonline.TextureMap
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#generateAllMaps()
	 * @see io.github.tomaso2468.rpgonline.TextureMap#genTextureMap(int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #isMapped()
	 * @see #setMapped(boolean)
	 * @see #getAutoSpriteMapSize(int)
	 */
	public static void setAutoSpriteMapSize(int autoSpriteMapSize) {
		if (autoSpriteMapSize <= 0) {
			throw new IllegalArgumentException("autoSpriteMapSize must be greater than 0.");
		}
		RPGConfig.autoSpriteMapSize = autoSpriteMapSize;
	}

	/**
	 * Determines if the wind effect will be used by the rendering engine. If set to
	 * {@code false} any information provided by the game engine about wind will be
	 * set to 0.
	 * 
	 * @return true if the wind effect is enabled. false otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.texture.WindTexture
	 * @see io.github.tomaso2468.rpgonline.world2d.texture.entity.WindEntityTexture
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 * @see io.github.tomaso2468.rpgonline.net.Client
	 * @see #setWind(boolean)
	 */
	public static boolean isWind() {
		return wind;
	}

	/**
	 * Determines if the wind effect will be used by the rendering engine. If set to
	 * {@code false} any information provided by the game engine about wind will be
	 * set to 0.
	 * 
	 * @param wind true if the wind effect is enabled. false otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.texture.WindTexture
	 * @see io.github.tomaso2468.rpgonline.world2d.texture.entity.WindEntityTexture
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 * @see io.github.tomaso2468.rpgonline.net.Client
	 * @see #isWind()
	 */
	public static void setWind(boolean wind) {
		RPGConfig.wind = wind;
	}

	/**
	 * The size used by tiles as the grid size.
	 * 
	 * @return an int that is greater that 0.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.Tile
	 * @see io.github.tomaso2468.rpgonline.world2d.texture.TileTexture
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 * @see #setTileSize(int)
	 */
	@Nonnegative
	public static int getTileSize() {
		return tileSize;
	}

	/**
	 * The size used by tiles as the grid size.
	 * 
	 * @param tileSize an int that is greater that 0.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.Tile
	 * @see io.github.tomaso2468.rpgonline.world2d.texture.TileTexture
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 * @see #getTileSize()
	 */
	@Nonnegative
	public static void setTileSize(int tileSize) {
		if (tileSize <= 0) {
			throw new IllegalArgumentException("tileSize must be greater than 0.");
		}
		RPGConfig.tileSize = tileSize;
	}

	/**
	 * A handler for storing bindings on keyboards. This defaults to a
	 * {@code MapKeyProvider}
	 * 
	 * @return A KeyboardInputProvider.
	 * 
	 * @see io.github.tomaso2468.rpgonline.input.MapKeyProvider
	 * @see io.github.tomaso2468.rpgonline.input.InputUtils
	 * @see #setKeyInput(KeyboardInputProvider)
	 */
	@Nonnull
	public static KeyboardInputProvider getKeyInput() {
		return keyInput;
	}

	/**
	 * A handler for storing bindings on keyboards. This defaults to a
	 * {@code MapKeyProvider}
	 * 
	 * @param keyInput A KeyboardInputProvider. This cannot be null.
	 * 
	 * @see io.github.tomaso2468.rpgonline.input.MapKeyProvider
	 * @see io.github.tomaso2468.rpgonline.input.InputUtils
	 * @see #getKeyInput()
	 */
	@Nonnull
	public static void setKeyInput(KeyboardInputProvider keyInput) {
		if (keyInput == null) {
			throw new NullPointerException("keyInput");
		}
		RPGConfig.keyInput = keyInput;
	}

	/**
	 * Determines if textures should be mapped/atlases. <b>This must be set before
	 * textures are initialised.</b>
	 * 
	 * @return {@code true} if mapping is enabled, {@code false} otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.TextureMap
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#generateAllMaps()
	 * @see io.github.tomaso2468.rpgonline.TextureMap#genTextureMap(int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #setMapped(boolean)
	 * @see #getAutoSpriteMapSize()
	 * @see #setAutoSpriteMapSize(int)
	 */
	public static boolean isMapped() {
		return mapped;
	}

	/**
	 * Sets a variable determining if textures should be mapped/atlases. <b>This
	 * must be set before textures are initialised.</b>
	 * 
	 * @param mapped {@code true} if mapping should be enabled, {@code false}
	 *               otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.TextureMap
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#generateAllMaps()
	 * @see io.github.tomaso2468.rpgonline.TextureMap#genTextureMap(int, int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see io.github.tomaso2468.rpgonline.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #isMapped()
	 * @see #getAutoSpriteMapSize()
	 * @see #setAutoSpriteMapSize(int)
	 */
	public static void setMapped(boolean mapped) {
		RPGConfig.mapped = mapped;
	}

	/**
	 * Determines how language settings are computed. This defaults to returning the
	 * current language. <b>This must be set before languages are initialised.</b>
	 * 
	 * @return The current language provider.
	 * 
	 * @see io.github.tomaso2468.rpgonline.lang.Lang
	 * @see #setLangProvider(LangProvider)
	 */
	@Nonnull
	public static LangProvider getLangProvider() {
		return lang;
	}

	/**
	 * Determines how language settings are computed. <b>This must be set before
	 * languages are initialised.</b>
	 * 
	 * @param lang The new language provider.
	 * 
	 * @see io.github.tomaso2468.rpgonline.lang.Lang
	 * @see #getLangProvider(LangProvider)
	 */
	@Nonnull
	public static void setLangProvider(LangProvider lang) {
		if (lang == null) {
			throw new NullPointerException("lang");
		}
		RPGConfig.lang = lang;
	}

	/**
	 * Gets the location of language files for the game. <b>This must be set before
	 * languages are initialised.</b>
	 * 
	 * @return An array of relative paths (to the language pack) of language files.
	 *         These will usually resemble file names.
	 * 
	 * @see io.github.tomaso2468.rpgonline.lang.Lang
	 * @see io.github.tomaso2468.rpgonline.lang.LangPack
	 */
	@Nonnull
	public static String[] getLangloc() {
		return langloc;
	}

	/**
	 * Sets the location of language files for the game. <b>This must be set before
	 * languages are initialised.</b>
	 * 
	 * @param An array of relative paths (to the language pack) of language files.
	 *           These will usually resemble file names. {@code null} will be
	 *           interpreted as an empty array.
	 * 
	 * @see io.github.tomaso2468.rpgonline.lang.Lang
	 * @see io.github.tomaso2468.rpgonline.lang.LangPack
	 */
	public static void setLangloc(String[] langloc) {
		if (langloc == null) {
			langloc = new String[0];
		}
		RPGConfig.langloc = langloc;
	}

	/**
	 * Determines if debug rendering is used.
	 * 
	 * @return {@code true} if debugging is active, {@code false} otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.debug.Debugger
	 */
	public static boolean isDebug() {
		return debug;
	}

	/**
	 * Sets if debug rendering is used.
	 * 
	 * @param debug {@code true} if debugging should be active, {@code false}
	 *              otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.debug.Debugger
	 */
	public static void setDebug(boolean debug) {
		RPGConfig.debug = debug;
	}

	/**
	 * Determines if lighting should be used.
	 * 
	 * @return {@code true} if lighting is enabled, {@code false} otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.LightSource
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 */
	public static boolean isLighting() {
		return lighting;
	}

	/**
	 * Sets if lighting should be used.
	 * 
	 * @param lighting {@code true} if lighting should be enabled, {@code false}
	 *                 otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.LightSource
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 */
	public static void setLighting(boolean lighting) {
		RPGConfig.lighting = lighting;
	}

	/**
	 * Determines if particles should be used.
	 * 
	 * @return {@code true} if particles are enabled, {@code false} otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 * @see io.github.tomaso2468.rpgonline.bullet.BulletState
	 * @see io.github.tomaso2468.rpgonline.particle.Particle
	 */
	public static boolean isParticles() {
		return particles;
	}

	/**
	 * Sets if particles should be used.
	 * 
	 * @param particles {@code true} if particles should be enabled, {@code false}
	 *                  otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 * @see io.github.tomaso2468.rpgonline.bullet.BulletState
	 * @see io.github.tomaso2468.rpgonline.particle.Particle
	 */
	public static void setParticles(boolean particles) {
		RPGConfig.particles = particles;
	}

	/**
	 * Determines if hitboxes should be rendered.
	 * 
	 * @param {@code true} if hitboxes are rendered, {@code false} otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 */
	public static boolean isHitbox() {
		return hitbox;
	}

	/**
	 * Sets if hitboxes should be rendered.
	 * 
	 * @param {@code true} if hitboxes should be rendered, {@code false} otherwise.
	 * 
	 * @see io.github.tomaso2468.rpgonline.world2d.WorldState
	 */
	public static void setHitbox(boolean hitbox) {
		RPGConfig.hitbox = hitbox;
	}

	/**
	 * Determines the default filter mode for textures. <b>This must be set before
	 * textures are initialised.</b>
	 * 
	 * @return <a href=
	 *         "http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html#FILTER_NEAREST">FILTER_NEAREST</a>
	 *         if nearest filtering is used and <a href=
	 *         "http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html#FILTER_LINEAR">FILTER_LINEAR</a>
	 *         if bilinear filtering is used.
	 * 
	 * @see org.newdawn.slick.Image#setFilter(int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap
	 */
	public static int getFilterMode() {
		return filterMode;
	}

	/**
	 * Sets the default filter mode for textures. <b>This must be set before
	 * textures are initialised.</b>
	 * 
	 * @param filterMode <a href=
	 *         "http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html#FILTER_NEAREST">FILTER_NEAREST</a>
	 *         if nearest filtering is used and <a href=
	 *         "http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html#FILTER_LINEAR">FILTER_LINEAR</a>
	 *         if bilinear filtering is used.
	 * 
	 * @see org.newdawn.slick.Image#setFilter(int)
	 * @see io.github.tomaso2468.rpgonline.TextureMap
	 */
	public static void setFilterMode(int filterMode) {
		RPGConfig.filterMode = filterMode;
	}
	
	/**
	 * Gets the number of pathfinding threads to use.
	 * @return An int value in the range 0..Integer.MAX_VALUE. A value of 0 will disable pathfinding.
	 */
	public static int getPathfindingThreads() {
		return pathfindingThreads;
	}

	/**
	 * Gets the number of pathfinding threads to use.
	 * @param pathfindingThreads An int value in the range 0..Integer.MAX_VALUE. A value of 0 will disable pathfinding.
	 */
	public static void setPathfindingThreads(int pathfindingThreads) {
		if (pathfindingThreads < 0) {
			throw new IllegalArgumentException("At least one pathfinding thread is required.");
		}
		RPGConfig.pathfindingThreads = pathfindingThreads;
	}

	/**
	 * Gets the time to wait before entering sleep in a pathfinding thread.
	 * @return A long value.
	 */
	public static long getPathfindingSleepDelay() {
		return pathfindingSleepDelay;
	}

	/**
	 * Sets the time to wait before entering sleep in a pathfinding thread.
	 * @param pathfindingSleepDelay A long value.
	 */
	public static void setPathfindingSleepDelay(long pathfindingSleepDelay) {
		RPGConfig.pathfindingSleepDelay = pathfindingSleepDelay;
	}

	/**
	 * Gets the time to sleep for in a pathfinding thread.
	 * @return A long value.
	 */
	public static long getPathfindingSleepTime() {
		return pathfindingSleepTime;
	}

	/**
	 * Sets the time to sleep for in a pathfinding thread.
	 * @param pathfindingSleepTime A long value.
	 */
	public static void setPathfindingSleepTime(long pathfindingSleepTime) {
		RPGConfig.pathfindingSleepTime = pathfindingSleepTime;
	}

	/**
	 * Determines if the HDR effect is enabled.
	 * @return {@code true} if HDR is enabled, {@code false} otherwise.
	 */
	public static boolean isHDR() {
		return hdr;
	}

	/**
	 * Sets if the MDR effect is enabled.
	 * @param hdr {@code true} if HDR is enabled, {@code false} otherwise.
	 */
	public static void setHDR(boolean hdr) {
		RPGConfig.hdr = hdr;
	}

}
