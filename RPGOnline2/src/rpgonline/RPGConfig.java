package rpgonline;

import javax.annotation.Nonnegative;
import javax.annotation.Nonnull;

import org.newdawn.slick.Image;

import rpgonline.input.ControllerInputProvider;
import rpgonline.input.KeyboardInputProvider;
import rpgonline.input.MapControllerProvider;
import rpgonline.input.MapKeyProvider;
import rpgonline.lang.LangProvider;

/**
 * A class for storing configuration details about the game engine.
 * 
 * @author Tomas
 */
public final class RPGConfig {
	/**
	 * Prevent instantiation
	 */
	private RPGConfig() {

	}

	/**
	 * The size used by sprite maps generated by TextureMap. This requires texture
	 * mapping to be enabled. <b>This must be set before textures are
	 * initialised.</b> This setting will not surpass the maximum texture size of
	 * the graphics card.
	 * 
	 * @see rpgonline.texture.TextureMap
	 * @see rpgonline.texture.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see rpgonline.texture.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see rpgonline.texture.TextureMap#generateAllMaps()
	 * @see rpgonline.texture.TextureMap#genTextureMap(int, int)
	 * @see rpgonline.texture.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see rpgonline.texture.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #mapped
	 */
	private static int autoSpriteMapSize = 512;
	/**
	 * Determines if the wind effect will be used by the rendering engine. If set to
	 * {@code false} any information provided by the game engine about wind will be
	 * set to 0.
	 * 
	 * @see rpgonline.texture.WindTexture
	 * @see rpgonline.texture.entity.WindEntityTexture
	 * @see rpgonline.state.WorldState
	 * @see rpgonline.net.Client
	 */
	private static boolean wind = false;
	/**
	 * The size used by tiles as the grid size.
	 * 
	 * @see rpgonline.tile.Tile
	 * @see rpgonline.texture.TileTexture
	 * @see rpgonline.state.WorldState
	 */
	private static int tileSize = 16;
	/**
	 * A handler for storing bindings on keyboards. This defaults to a
	 * {@code MapKeyProvider}
	 * 
	 * @see rpgonline.input.MapKeyProvider
	 * @see rpgonline.input.InputUtils
	 */
	private static KeyboardInputProvider keyInput = new MapKeyProvider();
	/**
	 * The sensitivity for interpreting an axis button as a normal button. If the
	 * value passes this it will be considered as true. This is applied to the
	 * absolute value of the axis.
	 * 
	 * @see rpgonline.input.InputUtils
	 * @see rpgonline.input.ControllerInputProvider
	 */
	private static float controllerActuation = 0.5f;
	/**
	 * A handler for storing bindings on controllers. This defaults to a
	 * {@code MapControllerProvider}
	 * 
	 * @see rpgonline.input.MapControllerProvider
	 * @see rpgonline.input.InputUtils
	 */
	private static ControllerInputProvider controllerInput = new MapControllerProvider();

	/**
	 * Determines if textures should be mapped/atlases. <b>This must be set before
	 * textures are initialised.</b>
	 * 
	 * @see rpgonline.texture.TextureMap
	 * @see rpgonline.texture.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see rpgonline.texture.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see rpgonline.texture.TextureMap#generateAllMaps()
	 * @see rpgonline.texture.TextureMap#genTextureMap(int, int)
	 * @see rpgonline.texture.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see rpgonline.texture.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #autoSpriteMapSize
	 */
	private static boolean mapped = false;

	/**
	 * Determines if debug rendering is used.
	 * 
	 * @see rpgonline.debug.Debugger
	 */
	private static boolean debug = false;

	/**
	 * Determines if lighting should be used.
	 * 
	 * @see rpgonline.world.LightSource
	 * @see rpgonline.state.WorldState
	 */
	private static boolean lighting = false;

	/**
	 * Determines if particles should be used.
	 * 
	 * @see rpgonline.state.WorldState
	 * @see rpgonline.bullet.BulletState
	 * @see rpgonline.part.Particle
	 */
	private static boolean particles = false;

	/**
	 * Determines if hitboxes should be rendered.
	 * 
	 * @see rpgonline.state.WorldState
	 */
	private static boolean hitbox = false;

	/**
	 * Determines the default filter mode for textures. <b>This must be set before
	 * textures are initialised.</b>
	 * 
	 * @see org.newdawn.slick.Image#setFilter(int)
	 * @see rpgonline.texture.TextureMap
	 */
	private static int filterMode = Image.FILTER_NEAREST;

	/**
	 * Determines if rendering should snap graphics to the pixel size of the game or
	 * allow subpixel rendering.
	 * 
	 * @see rpgonline.state.WorldState
	 */
	private static boolean snapToPixel = false;

	/**
	 * Determines how language settings are computed. This defaults to returning the
	 * current language. <b>This must be set before languages are initialised.</b>
	 * 
	 * @see rpgonline.lang.Lang
	 */
	private static LangProvider lang = new LangProvider() {
		@Override
		public void setLang(String lang) {

		}

		@Override
		public String getLang(String def) {
			return def;
		}
	};

	/**
	 * Determines the location of language files for the game. <b>This must be set
	 * before languages are initialised.</b>
	 * 
	 * @see rpgonline.lang.Lang
	 * @see rpgonline.lang.LangPack
	 */
	private static String[] langloc = new String[0];

	/**
	 * Gets the size used by sprite maps generated by TextureMap. This requires
	 * texture mapping to be enabled. This setting will not surpass the maximum
	 * texture size of the graphics card but may display as a higher value. <b>This
	 * must be set before textures are initialised.</b>
	 * 
	 * @return An int that is greater than 0.
	 * 
	 * @see rpgonline.texture.TextureMap
	 * @see rpgonline.texture.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see rpgonline.texture.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see rpgonline.texture.TextureMap#generateAllMaps()
	 * @see rpgonline.texture.TextureMap#genTextureMap(int, int)
	 * @see rpgonline.texture.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see rpgonline.texture.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #isMapped()
	 * @see #setMapped(boolean)
	 * @see #setAutoSpriteMapSize(int)
	 */
	public static int getAutoSpriteMapSize() {
		return autoSpriteMapSize;
	}

	/**
	 * Sets the size used by sprite maps generated by TextureMap. This requires
	 * texture mapping to be enabled. This setting will not surpass the maximum
	 * texture size of the graphics card but may display as a higher value. If a
	 * value greater than the maximum texture size is set it will change the setting
	 * but still be limited. <b>This must be set before textures are
	 * initialised.</b>
	 * 
	 * @return An int that is greater than 0.
	 * 
	 * @see rpgonline.texture.TextureMap
	 * @see rpgonline.texture.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see rpgonline.texture.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see rpgonline.texture.TextureMap#generateAllMaps()
	 * @see rpgonline.texture.TextureMap#genTextureMap(int, int)
	 * @see rpgonline.texture.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see rpgonline.texture.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #isMapped()
	 * @see #setMapped(boolean)
	 * @see #getAutoSpriteMapSize(int)
	 */
	public static void setAutoSpriteMapSize(int autoSpriteMapSize) {
		if (autoSpriteMapSize <= 0) {
			throw new IllegalArgumentException("autoSpriteMapSize must be greater than 0.");
		}
		RPGConfig.autoSpriteMapSize = autoSpriteMapSize;
	}

	/**
	 * Determines if the wind effect will be used by the rendering engine. If set to
	 * {@code false} any information provided by the game engine about wind will be
	 * set to 0.
	 * 
	 * @return true if the wind effect is enabled. false otherwise.
	 * 
	 * @see rpgonline.texture.WindTexture
	 * @see rpgonline.texture.entity.WindEntityTexture
	 * @see rpgonline.state.WorldState
	 * @see rpgonline.net.Client
	 * @see #setWind(boolean)
	 */
	public static boolean isWind() {
		return wind;
	}

	/**
	 * Determines if the wind effect will be used by the rendering engine. If set to
	 * {@code false} any information provided by the game engine about wind will be
	 * set to 0.
	 * 
	 * @param wind true if the wind effect is enabled. false otherwise.
	 * 
	 * @see rpgonline.texture.WindTexture
	 * @see rpgonline.texture.entity.WindEntityTexture
	 * @see rpgonline.state.WorldState
	 * @see rpgonline.net.Client
	 * @see #isWind()
	 */
	public static void setWind(boolean wind) {
		RPGConfig.wind = wind;
	}

	/**
	 * The size used by tiles as the grid size.
	 * 
	 * @return an int that is greater that 0.
	 * 
	 * @see rpgonline.tile.Tile
	 * @see rpgonline.texture.TileTexture
	 * @see rpgonline.state.WorldState
	 * @see #setTileSize(int)
	 */
	@Nonnegative
	public static int getTileSize() {
		return tileSize;
	}

	/**
	 * The size used by tiles as the grid size.
	 * 
	 * @param tileSize an int that is greater that 0.
	 * 
	 * @see rpgonline.tile.Tile
	 * @see rpgonline.texture.TileTexture
	 * @see rpgonline.state.WorldState
	 * @see #getTileSize()
	 */
	@Nonnegative
	public static void setTileSize(int tileSize) {
		if (tileSize <= 0) {
			throw new IllegalArgumentException("tileSize must be greater than 0.");
		}
		RPGConfig.tileSize = tileSize;
	}

	/**
	 * A handler for storing bindings on keyboards. This defaults to a
	 * {@code MapKeyProvider}
	 * 
	 * @return A KeyboardInputProvider.
	 * 
	 * @see rpgonline.input.MapKeyProvider
	 * @see rpgonline.input.InputUtils
	 * @see #setKeyInput(KeyboardInputProvider)
	 */
	@Nonnull
	public static KeyboardInputProvider getKeyInput() {
		return keyInput;
	}

	/**
	 * A handler for storing bindings on keyboards. This defaults to a
	 * {@code MapKeyProvider}
	 * 
	 * @param keyInput A KeyboardInputProvider. This cannot be null.
	 * 
	 * @see rpgonline.input.MapKeyProvider
	 * @see rpgonline.input.InputUtils
	 * @see #getKeyInput()
	 */
	@Nonnull
	public static void setKeyInput(KeyboardInputProvider keyInput) {
		if (keyInput == null) {
			throw new NullPointerException("keyInput");
		}
		RPGConfig.keyInput = keyInput;
	}

	/**
	 * The sensitivity for interpreting an axis button as a normal button. If the
	 * value passes this it will be considered as true. This is applied to the
	 * absolute value of the axis.
	 * 
	 * @return A float that is equal to or greater than 0. A float value of Infinity
	 *         or NaN may be used to disable axis that are used as buttons.
	 * 
	 * @see rpgonline.input.InputUtils
	 * @see rpgonline.input.ControllerInputProvider
	 * @see #setControllerActuation(float)
	 */
	@Nonnegative
	public static float getControllerActuation() {
		return controllerActuation;
	}

	/**
	 * The sensitivity for interpreting an axis button as a normal button. If the
	 * value passes this it will be considered as true. This is applied to the
	 * absolute value of the axis.
	 * 
	 * @param controllerActuation A float that is equal to or greater than 0. A
	 *                            float value of Infinity or NaN may be used to
	 *                            disable axis that are used as buttons.
	 * 
	 * @see rpgonline.input.InputUtils
	 * @see rpgonline.input.ControllerInputProvider
	 * @see #getControllerActuation()
	 */
	@Nonnegative
	public static void setControllerActuation(float controllerActuation) {
		if (controllerActuation < 0) {
			throw new IllegalArgumentException("Actuation point cannot be less than 0.");
		}
		RPGConfig.controllerActuation = controllerActuation;
	}

	/**
	 * A handler for storing bindings on controllers. This defaults to a
	 * {@code MapControllerProvider}
	 * 
	 * @return A ControllerInputProvider.
	 * 
	 * @see rpgonline.input.MapControllerProvider
	 * @see rpgonline.input.InputUtils
	 * @see #setControllerInput(ControllerInputProvider)
	 */
	@Nonnull
	public static ControllerInputProvider getControllerInput() {
		return controllerInput;
	}

	/**
	 * A handler for storing bindings on controllers. This defaults to a
	 * {@code MapControllerProvider}
	 * 
	 * @param controllerInput A ControllerInputProvider. This cannot be null.
	 * 
	 * @see rpgonline.input.MapControllerProvider
	 * @see rpgonline.input.InputUtils
	 * @see #getControllerInput()
	 */
	@Nonnull
	public static void setControllerInput(ControllerInputProvider controllerInput) {
		if (controllerInput == null) {
			throw new NullPointerException("controllerInput");
		}
		RPGConfig.controllerInput = controllerInput;
	}

	/**
	 * Determines if textures should be mapped/atlases. <b>This must be set before
	 * textures are initialised.</b>
	 * 
	 * @return {@code true} if mapping is enabled, {@code false} otherwise.
	 * 
	 * @see rpgonline.texture.TextureMap
	 * @see rpgonline.texture.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see rpgonline.texture.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see rpgonline.texture.TextureMap#generateAllMaps()
	 * @see rpgonline.texture.TextureMap#genTextureMap(int, int)
	 * @see rpgonline.texture.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see rpgonline.texture.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #setMapped(boolean)
	 * @see #getAutoSpriteMapSize()
	 * @see #setAutoSpriteMapSize(int)
	 */
	public static boolean isMapped() {
		return mapped;
	}

	/**
	 * Sets a variable determining if textures should be mapped/atlases. <b>This
	 * must be set before textures are initialised.</b>
	 * 
	 * @param mapped {@code true} if mapping should be enabled, {@code false}
	 *               otherwise.
	 * 
	 * @see rpgonline.texture.TextureMap
	 * @see rpgonline.texture.TextureMap#addMappedTexture(String,
	 *      java.awt.image.BufferedImage)
	 * @see rpgonline.texture.TextureMap#addSpriteMapMapped(String,
	 *      java.awt.image.BufferedImage, int, int)
	 * @see rpgonline.texture.TextureMap#generateAllMaps()
	 * @see rpgonline.texture.TextureMap#genTextureMap(int, int)
	 * @see rpgonline.texture.TextureMap#loadMappedTexture(String, java.net.URL)
	 * @see rpgonline.texture.TextureMap#loadSpriteMapMapped(String, java.net.URL,
	 *      int, int)
	 * @see #isMapped()
	 * @see #getAutoSpriteMapSize()
	 * @see #setAutoSpriteMapSize(int)
	 */
	public static void setMapped(boolean mapped) {
		RPGConfig.mapped = mapped;
	}

	/**
	 * Determines how language settings are computed. This defaults to returning the
	 * current language. <b>This must be set before languages are initialised.</b>
	 * 
	 * @return The current language provider.
	 * 
	 * @see rpgonline.lang.Lang
	 * @see #setLangProvider(LangProvider)
	 */
	@Nonnull
	public static LangProvider getLangProvider() {
		return lang;
	}

	/**
	 * Determines how language settings are computed. <b>This must be set before
	 * languages are initialised.</b>
	 * 
	 * @param lang The new language provider.
	 * 
	 * @see rpgonline.lang.Lang
	 * @see #getLangProvider(LangProvider)
	 */
	@Nonnull
	public static void setLangProvider(LangProvider lang) {
		if (lang == null) {
			throw new NullPointerException("lang");
		}
		RPGConfig.lang = lang;
	}

	/**
	 * Gets the location of language files for the game. <b>This must be set before
	 * languages are initialised.</b>
	 * 
	 * @return An array of relative paths (to the language pack) of language files.
	 *         These will usually resemble file names.
	 * 
	 * @see rpgonline.lang.Lang
	 * @see rpgonline.lang.LangPack
	 */
	@Nonnull
	public static String[] getLangloc() {
		return langloc;
	}

	/**
	 * Sets the location of language files for the game. <b>This must be set before
	 * languages are initialised.</b>
	 * 
	 * @param An array of relative paths (to the language pack) of language files.
	 *           These will usually resemble file names. {@code null} will be
	 *           interpreted as an empty array.
	 * 
	 * @see rpgonline.lang.Lang
	 * @see rpgonline.lang.LangPack
	 */
	public static void setLangloc(String[] langloc) {
		if (langloc == null) {
			langloc = new String[0];
		}
		RPGConfig.langloc = langloc;
	}

	/**
	 * Determines if debug rendering is used.
	 * 
	 * @return {@code true} if debugging is active, {@code false} otherwise.
	 * 
	 * @see rpgonline.debug.Debugger
	 */
	public static boolean isDebug() {
		return debug;
	}

	/**
	 * Sets if debug rendering is used.
	 * 
	 * @param debug {@code true} if debugging should be active, {@code false}
	 *              otherwise.
	 * 
	 * @see rpgonline.debug.Debugger
	 */
	public static void setDebug(boolean debug) {
		RPGConfig.debug = debug;
	}

	/**
	 * Determines if lighting should be used.
	 * 
	 * @return {@code true} if lighting is enabled, {@code false} otherwise.
	 * 
	 * @see rpgonline.world.LightSource
	 * @see rpgonline.state.WorldState
	 */
	public static boolean isLighting() {
		return lighting;
	}

	/**
	 * Sets if lighting should be used.
	 * 
	 * @param lighting {@code true} if lighting should be enabled, {@code false}
	 *                 otherwise.
	 * 
	 * @see rpgonline.world.LightSource
	 * @see rpgonline.state.WorldState
	 */
	public static void setLighting(boolean lighting) {
		RPGConfig.lighting = lighting;
	}

	/**
	 * Determines if particles should be used.
	 * 
	 * @return {@code true} if particles are enabled, {@code false} otherwise.
	 * 
	 * @see rpgonline.state.WorldState
	 * @see rpgonline.bullet.BulletState
	 * @see rpgonline.part.Particle
	 */
	public static boolean isParticles() {
		return particles;
	}

	/**
	 * Sets if particles should be used.
	 * 
	 * @param particles {@code true} if particles should be enabled, {@code false}
	 *                  otherwise.
	 * 
	 * @see rpgonline.state.WorldState
	 * @see rpgonline.bullet.BulletState
	 * @see rpgonline.part.Particle
	 */
	public static void setParticles(boolean particles) {
		RPGConfig.particles = particles;
	}

	/**
	 * Determines if hitboxes should be rendered.
	 * 
	 * @param {@code true} if hitboxes are rendered, {@code false} otherwise.
	 * 
	 * @see rpgonline.state.WorldState
	 */
	public static boolean isHitbox() {
		return hitbox;
	}

	/**
	 * Sets if hitboxes should be rendered.
	 * 
	 * @param {@code true} if hitboxes should be rendered, {@code false} otherwise.
	 * 
	 * @see rpgonline.state.WorldState
	 */
	public static void setHitbox(boolean hitbox) {
		RPGConfig.hitbox = hitbox;
	}

	/**
	 * Determines the default filter mode for textures. <b>This must be set before
	 * textures are initialised.</b>
	 * 
	 * @return <a href=
	 *         "http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html#FILTER_NEAREST">FILTER_NEAREST</a>
	 *         if nearest filtering is used and <a href=
	 *         "http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html#FILTER_LINEAR">FILTER_LINEAR</a>
	 *         if bilinear filtering is used.
	 * 
	 * @see org.newdawn.slick.Image#setFilter(int)
	 * @see rpgonline.texture.TextureMap
	 */
	public static int getFilterMode() {
		return filterMode;
	}

	/**
	 * Sets the default filter mode for textures. <b>This must be set before
	 * textures are initialised.</b>
	 * 
	 * @param filterMode <a href=
	 *         "http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html#FILTER_NEAREST">FILTER_NEAREST</a>
	 *         if nearest filtering is used and <a href=
	 *         "http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html#FILTER_LINEAR">FILTER_LINEAR</a>
	 *         if bilinear filtering is used.
	 * 
	 * @see org.newdawn.slick.Image#setFilter(int)
	 * @see rpgonline.texture.TextureMap
	 */
	public static void setFilterMode(int filterMode) {
		RPGConfig.filterMode = filterMode;
	}

	/**
	 * Determines if rendering should snap graphics to the pixel size of the game or
	 * allow subpixel rendering.
	 * 
	 * @return {@code true} if rendering is locked to pixels, {@code false} otherwise (subpixel rendering).
	 * 
	 * @see rpgonline.state.WorldState
	 */
	public static boolean isSnapToPixel() {
		return snapToPixel;
	}

	/**
	 * Sets if rendering should snap graphics to the pixel size of the game or
	 * allow subpixel rendering.
	 * 
	 * @param snapToPixel {@code true} if rendering is locked to pixels, {@code false} otherwise (subpixel rendering).
	 * 
	 * @see rpgonline.state.WorldState
	 */
	public static void setSnapToPixel(boolean snapToPixel) {
		RPGConfig.snapToPixel = snapToPixel;
	}

}
